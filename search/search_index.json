{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zarr Cloud-Native Workflow for Water Body Detection","text":""},{"location":"#overview","title":"Overview","text":"<p>This module implements a cloud-native approach to detecting water bodies using Sentinel-2 data. The workflow uses the Common Workflow Language (CWL) for defining tasks and outputs data in the Zarr format, fully compatible with the STAC Datacube Extension.</p> <p>By integrating Sentinel-2 data with Zarr and CWL, the workflow enables:</p> <ul> <li>Efficient parallel processing of geospatial data.</li> <li>Scalable cloud-native solutions for environmental monitoring.</li> <li>Interoperable metadata for easy integration with Earth Observation (EO) datalakes.</li> </ul>"},{"location":"#workflow-steps","title":"Workflow Steps","text":"<ol> <li>Crop Sentinel-2 Imagery</li> </ol> <p>Crop Sentinel-2 imagery to the defined Area of Interest (AOI) using the input bounding box and Sentinel-2 bands.</p> <p>Input:</p> <ul> <li>STAC item URL</li> <li>Bounding box (e.g., -121.399,39.834,-120.74,40.472)</li> <li>EPSG code (e.g., EPSG:4326)</li> </ul> <p>Output: </p> <ul> <li> <p>Cropped GeoTIFF images</p> </li> <li> <p>Compute NDWI</p> </li> </ul> <p>Apply the Normalized Difference Water Index (NDWI) formula to the cropped imagery:</p> <p>Input: </p> <ul> <li>Cropped Sentinel-2 bands (green and nir)</li> </ul> <p>Output: </p> <ul> <li> <p>NDWI GeoTIFF</p> </li> <li> <p>Apply Otsu's Thresholding</p> </li> </ul> <p>Use Otsu's thresholding algorithm to convert the NDWI to a binary water mask.</p> <p>Input: </p> <ul> <li>NDWI GeoTIFF</li> </ul> <p>Output: </p> <ul> <li> <p>Binary water mask GeoTIFF</p> </li> <li> <p>Convert to Zarr Datacube</p> </li> </ul> <p>Aggregate binary water masks over time into a Zarr datacube. The resulting dataset includes temporal and spatial dimensions.</p> <p>Input: </p> <ul> <li>Binary water masks</li> </ul> <p>Output:</p> <ul> <li> <p>Zarr dataset</p> </li> <li> <p>Generate STAC Metadata</p> </li> </ul> <p>Produce STAC items for each step, describing the results with the appropriate metadata.</p> <p>Input: </p> <ul> <li>Process outputs</li> </ul> <p>Output: </p> <ul> <li>Zarr encoded result</li> <li>STAC item (including Datacube metadata)</li> </ul>"},{"location":"exploitation/","title":"TL;DR","text":"In\u00a0[1]: Copied! <pre>import os\nimport sys\n\nmodule_path = os.path.abspath(os.path.join(\".\"))\nsys.path.insert(0, module_path)\n\nfrom helpers import WorkflowViewer\nimport cwl_loader\ncwl_loader.logger.remove()\ncwl_loader.logger.add(sys.stderr, level=\"INFO\")\n</pre> import os import sys  module_path = os.path.abspath(os.path.join(\".\")) sys.path.insert(0, module_path)  from helpers import WorkflowViewer import cwl_loader cwl_loader.logger.remove() cwl_loader.logger.add(sys.stderr, level=\"INFO\")  Out[1]: <pre>1</pre> In\u00a0[2]: Copied! <pre>version = \"0.3.0\"\nwf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", \"water-bodies\")\n</pre> version = \"0.3.0\" wf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", \"water-bodies\") In\u00a0[3]: Copied! <pre>wf.display_inputs()\n</pre> wf.display_inputs() Id Type Label Doc <code>stac_api_endpoint</code> <code>https://raw.githubusercontent.com/eoap/schemas/main/experimental/api-endpoint.yaml#APIEndpoint</code> STAC API endpoint STAC API endpoint <code>search_request</code> <code>https://raw.githubusercontent.com/eoap/schemas/main/experimental/discovery.yaml#STACSearchSettings</code> STAC search request STAC search request <code>bands</code> <code>string[]</code> bands used for the NDWI bands used for the NDWI In\u00a0[4]: Copied! <pre>wf.display_steps()\n</pre> wf.display_steps() Id Runs Label Doc <code>discovery</code> <code>#stac-client</code> STAC API discovery Discover STAC items from a STAC API endpoint based on a search request <code>convert_search</code> <code>#convert-search</code> Convert Search Convert Search results to get the item self hrefs and the area of interest <code>water_bodies</code> <code>#detect_water_body</code> Water bodies detection Water bodies detection based on NDWI and otsu threshold applied to each STAC item (sub-workflow) <code>stac</code> <code>#stac</code> Create a STAC catalog with COG outputs Create a STAC catalog with the detected water bodies COG outputs <code>stac_zarr</code> <code>#stac-zarr</code> Create a STAC Catalog for the Zarr store Create a STAC Catalog for the Zarr store from the STAC catalog with COG outputs In\u00a0[5]: Copied! <pre>wf.display_outputs()\n</pre> wf.display_outputs()  Id Type Label Doc <code>zarr_stac_catalog</code> <code>Directory</code> None None <code>stac_catalog</code> <code>Directory</code> None None In\u00a0[6]: Copied! <pre>wf.display_components_diagram()\n</pre> wf.display_components_diagram() In\u00a0[7]: Copied! <pre>wf.display_class_diagram()\n</pre> wf.display_class_diagram() In\u00a0[8]: Copied! <pre>wf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies-occurrence.{version}.cwl\", \"water-bodies-occurrence\")\n</pre> wf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies-occurrence.{version}.cwl\", \"water-bodies-occurrence\") In\u00a0[9]: Copied! <pre>wf.display_inputs()\n</pre> wf.display_inputs() Id Type Label Doc <code>zarr-stac-catalog</code> <code>Directory</code> Zarr store STAC Catalog Input STAC catalog with datacube In\u00a0[10]: Copied! <pre>wf.display_steps()\n</pre> wf.display_steps() Id Runs Label Doc <code>step_occurrence</code> <code>#occurrence</code> Water bodies occurrence Water bodies occurrence based on NDWI and otsu threshold In\u00a0[11]: Copied! <pre>wf.display_outputs()\n</pre> wf.display_outputs()  Id Type Label Doc <code>stac-catalog</code> <code>Directory</code> STAC catalog Output STAC catalog with water bodies occurrence In\u00a0[12]: Copied! <pre>wf.display_components_diagram()\n</pre> wf.display_components_diagram() In\u00a0[13]: Copied! <pre>wf.display_class_diagram()\n</pre> wf.display_class_diagram() In\u00a0[14]: Copied! <pre>import yaml\nfrom shutil import which\nimport nest_asyncio\nfrom cwltool.main import main\nfrom io import StringIO\nimport argparse\nimport json\nnest_asyncio.apply()\n</pre> import yaml from shutil import which import nest_asyncio from cwltool.main import main from io import StringIO import argparse import json nest_asyncio.apply() In\u00a0[15]: Copied! <pre>if which(\"podman\"):\n    podman = True\n    print(\"Using podman\")\nelif which(\"docker\"):\n    podman = False\n    print(\"Using docker\")\nelse:\n    raise ValueError(\"No container engine\")\n\npodman = False\n</pre> if which(\"podman\"):     podman = True     print(\"Using podman\") elif which(\"docker\"):     podman = False     print(\"Using docker\") else:     raise ValueError(\"No container engine\")  podman = False <pre>Using podman\n</pre> In\u00a0[16]: Copied! <pre>params = {}\n\nparams[\"bands\"] = [\"green\", \"nir\"]\n\nparams[\"stac_api_endpoint\"] = {\n    \"url\": {\"value\": \"https://earth-search.aws.element84.com/v1/\"},\n    \"headers\": [],\n}\n\nparams[\"search_request\"] = {\n    \"limit\": 20,\n    \"collections\": [\"sentinel-2-l2a\"],\n    \"datetime_interval\": {\n        \"start\": {\"value\": \"2021-06-01T00:00:00\"},\n        \"end\": {\"value\": \"2021-08-01T23:59:59\"},\n    },\n    \"bbox\": [-121.399, 39.834, -120.74, 40.472],\n    \"max-items\": 10\n}\n\nwith open(\"producer-params.yaml\", \"w\") as file:\n    print(yaml.dump(params), file=file)\n</pre> params = {}  params[\"bands\"] = [\"green\", \"nir\"]  params[\"stac_api_endpoint\"] = {     \"url\": {\"value\": \"https://earth-search.aws.element84.com/v1/\"},     \"headers\": [], }  params[\"search_request\"] = {     \"limit\": 20,     \"collections\": [\"sentinel-2-l2a\"],     \"datetime_interval\": {         \"start\": {\"value\": \"2021-06-01T00:00:00\"},         \"end\": {\"value\": \"2021-08-01T23:59:59\"},     },     \"bbox\": [-121.399, 39.834, -120.74, 40.472],     \"max-items\": 10 }  with open(\"producer-params.yaml\", \"w\") as file:     print(yaml.dump(params), file=file) In\u00a0[17]: Copied! <pre>print(yaml.dump(params))\n</pre> print(yaml.dump(params)) <pre>bands:\n- green\n- nir\nsearch_request:\n  bbox:\n  - -121.399\n  - 39.834\n  - -120.74\n  - 40.472\n  collections:\n  - sentinel-2-l2a\n  datetime_interval:\n    end:\n      value: '2021-08-01T23:59:59'\n    start:\n      value: '2021-06-01T00:00:00'\n  limit: 20\n  max-items: 10\nstac_api_endpoint:\n  headers: []\n  url:\n    value: https://earth-search.aws.element84.com/v1/\n\n</pre> In\u00a0[18]: Copied! <pre>parsed_args = argparse.Namespace(\n    podman=podman,\n    parallel=False,\n    validate=False,\n    debug=False,\n    outdir=\"./runs\",\n    quiet=True,\n    workflow=f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl#water-bodies\",\n    job_order=[\"producer-params.yaml\"],\n)\n\nstream_out = StringIO()\nstream_err = StringIO()\n\nres = main(\n    args=parsed_args,\n    stdout=stream_out,\n    stderr=stream_err,\n)\n\nassert res == 0\n</pre> parsed_args = argparse.Namespace(     podman=podman,     parallel=False,     validate=False,     debug=False,     outdir=\"./runs\",     quiet=True,     workflow=f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl#water-bodies\",     job_order=[\"producer-params.yaml\"], )  stream_out = StringIO() stream_err = StringIO()  res = main(     args=parsed_args,     stdout=stream_out,     stderr=stream_err, )  assert res == 0 <pre>Error: No such object: ghcr.io/eoap/schemas/stac-api-client@sha256:a7e346f704836d07f5dabc6b29ee3359e7253f4a294d74f3899973b8920da6f7\n</pre> <pre>Error: No such object: ghcr.io/eoap/zarr-cloud-native-format/yq@sha256:401655f3f4041bf3d03b05f3b24ad4b9d18cfcf908c3b44f5901383621d0688a\n</pre> <p>The <code>stream_out</code> object contains the cwltool stdout.</p> <p>We can list the results keys with:</p> In\u00a0[19]: Copied! <pre>producer_results = json.loads(stream_out.getvalue())\n\nlist(producer_results.keys())\n</pre> producer_results = json.loads(stream_out.getvalue())  list(producer_results.keys()) Out[19]: <pre>['zarr_stac_catalog', 'stac_catalog']</pre> <p>And find the path of the directory containing the STAC Catalog with the Zarr store:</p> In\u00a0[20]: Copied! <pre>producer_results[\"zarr_stac_catalog\"][\"path\"]\n</pre> producer_results[\"zarr_stac_catalog\"][\"path\"] Out[20]: <pre>'/home/runner/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/runs/zf2jop4a'</pre> In\u00a0[21]: Copied! <pre>import pystac\nimport os\nfrom pystac.extensions.datacube import DatacubeExtension\n</pre> import pystac import os from pystac.extensions.datacube import DatacubeExtension  In\u00a0[22]: Copied! <pre>cat = pystac.Catalog.from_file(\n    os.path.join(\n        producer_results[\"zarr_stac_catalog\"][\"path\"], \"catalog.json\"\n    )\n)\n</pre> cat = pystac.Catalog.from_file(     os.path.join(         producer_results[\"zarr_stac_catalog\"][\"path\"], \"catalog.json\"     ) ) In\u00a0[23]: Copied! <pre>cat.describe()\n</pre> cat.describe() <pre>* &lt;Catalog id=water-bodies&gt;\n    * &lt;Collection id=water-bodies&gt;\n</pre> <p>Now open the STAC Collection named <code>water-bodies</code>:</p> In\u00a0[24]: Copied! <pre>collection = cat.get_child(\"water-bodies\")\n\ncollection.describe()\n</pre> collection = cat.get_child(\"water-bodies\")  collection.describe() <pre>* &lt;Collection id=water-bodies&gt;\n</pre> In\u00a0[25]: Copied! <pre>collection\n</pre> collection Out[25]:      &lt;Collection id=water-bodies&gt;  <ul> <li> type \"Collection\" </li> <li> id \"water-bodies\" </li> <li> stac_version \"1.1.0\" </li> <li> description \"Collection of detected water bodies\" </li> <li> links[] 3 items <ul> <li> 0 <ul> <li> rel \"root\" </li> <li> href \"/home/runner/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/runs/zf2jop4a/catalog.json\" </li> <li> type \"application/json\" </li> <li> title \"Water bodies catalog\" </li> </ul> </li> </ul> <ul> <li> 1 <ul> <li> rel \"self\" </li> <li> href \"/home/runner/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/runs/zf2jop4a/water-bodies/collection.json\" </li> <li> type \"application/json\" </li> </ul> </li> </ul> <ul> <li> 2 <ul> <li> rel \"parent\" </li> <li> href \"/home/runner/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/runs/zf2jop4a/catalog.json\" </li> <li> type \"application/json\" </li> <li> title \"Water bodies catalog\" </li> </ul> </li> </ul> </li> <li> stac_extensions[] 1 items <ul> <li> 0 \"https://stac-extensions.github.io/datacube/v2.2.0/schema.json\" </li> </ul> </li> <li> cube:dimensions <ul> <li> x <ul> <li> type \"spatial\" </li> <li> axis \"x\" </li> <li> extent[] 2 items <ul> <li> 0 636995.0 </li> </ul> <ul> <li> 1 691585.0 </li> </ul> </li> <li> reference_system \"epsg:32610\" </li> <li> description \"X coordinate of projection\" </li> </ul> </li> <li> y <ul> <li> type \"spatial\" </li> <li> axis \"y\" </li> <li> extent[] 2 items <ul> <li> 0 4410555.0 </li> </ul> <ul> <li> 1 4482595.0 </li> </ul> </li> <li> reference_system \"epsg:32610\" </li> <li> description \"Y coordinate of projection\" </li> </ul> </li> <li> time <ul> <li> type \"temporal\" </li> <li> extent[] 2 items <ul> <li> 0 \"2021-06-28T19:03:24.330000000\" </li> </ul> <ul> <li> 1 \"2021-07-28T19:03:25.963000000\" </li> </ul> </li> <li> description \"Time dimension\" </li> </ul> </li> </ul> </li> <li> cube:variables <ul> <li> data <ul> <li> type \"data\" </li> <li> name \"water-bodies\" </li> <li> description \"detected water bodies\" </li> <li> dimensions[] 3 items <ul> <li> 0 \"y\" </li> </ul> <ul> <li> 1 \"x\" </li> </ul> <ul> <li> 2 \"time\" </li> </ul> </li> <li> chunks[] 3 items <ul> <li> 0 512 </li> </ul> <ul> <li> 1 512 </li> </ul> <ul> <li> 2 1 </li> </ul> </li> </ul> </li> </ul> </li> <li> title \"Detected water bodies\" </li> <li> extent <ul> <li> spatial <ul> <li> bbox[] 1 items <ul> <li> 0[] 4 items <ul> <li> 0 -121.39905410179915 </li> </ul> <ul> <li> 1 39.82336095080461 </li> </ul> <ul> <li> 2 -120.73995321724426 </li> </ul> <ul> <li> 3 40.482798837728375 </li> </ul> </li> </ul> </li> </ul> </li> <li> temporal <ul> <li> interval[] 1 items <ul> <li> 0[] 2 items <ul> <li> 0 \"2021-06-28T19:03:24.330000Z\" </li> </ul> <ul> <li> 1 \"2021-07-28T19:03:25.963000Z\" </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> license \"other\" </li> <li> assets <ul> <li> data <ul> <li> href \"result.zarr\" </li> <li> type \"application/vnd+zarr\" </li> <li> title \"Detected water bodies\" </li> <li> description \"Detected water bodies in Zarr cloud-native format\" </li> <li> xarray:open_kwargs <ul> <li> consolidated True </li> </ul> </li> <li> roles[] 2 items <ul> <li> 0 \"data\" </li> </ul> <ul> <li> 1 \"zarr\" </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>The STAC Collection contains an asset:</p> In\u00a0[26]: Copied! <pre>zarr_asset = collection.get_assets()[\"data\"]\n\nprint(f\"Zarr asset media type: {zarr_asset.media_type}\")\n\nzarr_asset\n</pre> zarr_asset = collection.get_assets()[\"data\"]  print(f\"Zarr asset media type: {zarr_asset.media_type}\")  zarr_asset <pre>Zarr asset media type: application/vnd+zarr\n</pre> Out[26]:      &lt;Asset href=result.zarr&gt;  <ul> <li> href \"result.zarr\" </li> <li> type \"application/vnd+zarr\" </li> <li> title \"Detected water bodies\" </li> <li> description \"Detected water bodies in Zarr cloud-native format\" </li> <li> xarray:open_kwargs <ul> <li> consolidated True </li> </ul> </li> <li> roles[] 2 items <ul> <li> 0 \"data\" </li> </ul> <ul> <li> 1 \"zarr\" </li> </ul> </li> </ul> <p>Inspect the datacube extension metadata included in the STAC Collection:</p> In\u00a0[27]: Copied! <pre>dc_collection = DatacubeExtension.ext(collection)\n</pre> dc_collection = DatacubeExtension.ext(collection) <ul> <li>List and describe the dimensions</li> </ul> In\u00a0[28]: Copied! <pre>for key, value in dc_collection.dimensions.items():\n\n    print(key, dc_collection.dimensions[key].to_dict())\n</pre> for key, value in dc_collection.dimensions.items():      print(key, dc_collection.dimensions[key].to_dict()) <pre>x {'type': 'spatial', 'axis': 'x', 'extent': [636995.0, 691585.0], 'reference_system': 'epsg:32610', 'description': 'X coordinate of projection'}\ny {'type': 'spatial', 'axis': 'y', 'extent': [4410555.0, 4482595.0], 'reference_system': 'epsg:32610', 'description': 'Y coordinate of projection'}\ntime {'type': 'temporal', 'extent': ['2021-06-28T19:03:24.330000000', '2021-07-28T19:03:25.963000000'], 'description': 'Time dimension'}\n</pre> <ul> <li>List and describe the variables</li> </ul> In\u00a0[29]: Copied! <pre>for key, value in dc_collection.variables.items():\n    print(key, dc_collection.variables[key].to_dict())\n</pre> for key, value in dc_collection.variables.items():     print(key, dc_collection.variables[key].to_dict()) <pre>data {'type': 'data', 'name': 'water-bodies', 'description': 'detected water bodies', 'dimensions': ['y', 'x', 'time'], 'chunks': [512, 512, 1]}\n</pre> In\u00a0[30]: Copied! <pre>dc_collection.variables[\"data\"].to_dict()\n</pre> dc_collection.variables[\"data\"].to_dict() Out[30]: <pre>{'type': 'data',\n 'name': 'water-bodies',\n 'description': 'detected water bodies',\n 'dimensions': ['y', 'x', 'time'],\n 'chunks': [512, 512, 1]}</pre> In\u00a0[31]: Copied! <pre>import xarray as xr\n</pre> import xarray as xr In\u00a0[32]: Copied! <pre>zarr_asset.extra_fields[\"xarray:open_kwargs\"]\n</pre> zarr_asset.extra_fields[\"xarray:open_kwargs\"] Out[32]: <pre>{'consolidated': True}</pre> In\u00a0[33]: Copied! <pre>water_bodies = xr.open_zarr(zarr_asset.get_absolute_href(), **zarr_asset.extra_fields[\"xarray:open_kwargs\"])\n</pre> water_bodies = xr.open_zarr(zarr_asset.get_absolute_href(), **zarr_asset.extra_fields[\"xarray:open_kwargs\"])  In\u00a0[34]: Copied! <pre>xr.set_options(display_style=\"text\")\n\nwater_bodies\n</pre> xr.set_options(display_style=\"text\")  water_bodies Out[34]: <pre>&lt;xarray.Dataset&gt; Size: 315MB\nDimensions:      (time: 8, y: 7205, x: 5460)\nCoordinates:\n  * time         (time) datetime64[ns] 64B 2021-06-28T19:03:24.330000 ... 202...\n  * x            (x) float64 44kB 6.37e+05 6.37e+05 ... 6.916e+05 6.916e+05\n  * y            (y) float64 58kB 4.483e+06 4.483e+06 ... 4.411e+06 4.411e+06\nData variables:\n    data         (time, y, x) uint8 315MB dask.array&lt;chunksize=(1, 512, 512), meta=np.ndarray&gt;\n    spatial_ref  int32 4B ...</pre> <p>Inspect the data variable:</p> In\u00a0[35]: Copied! <pre>water_bodies.data\n</pre> water_bodies.data Out[35]: <pre>&lt;xarray.DataArray 'data' (time: 8, y: 7205, x: 5460)&gt; Size: 315MB\ndask.array&lt;open_dataset-data, shape=(8, 7205, 5460), dtype=uint8, chunksize=(1, 512, 512), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * time     (time) datetime64[ns] 64B 2021-06-28T19:03:24.330000 ... 2021-07...\n  * x        (x) float64 44kB 6.37e+05 6.37e+05 6.37e+05 ... 6.916e+05 6.916e+05\n  * y        (y) float64 58kB 4.483e+06 4.483e+06 ... 4.411e+06 4.411e+06\nAttributes:\n    grid_mapping:  spatial_ref\n    nodata:        0.0</pre> <ul> <li>Check the geospatial metadata</li> </ul> In\u00a0[36]: Copied! <pre>water_bodies.data_vars[\"spatial_ref\"]\n</pre> water_bodies.data_vars[\"spatial_ref\"] Out[36]: <pre>&lt;xarray.DataArray 'spatial_ref' ()&gt; Size: 4B\n[1 values with dtype=int32]\nAttributes: (12/18)\n    GeoTransform:                      636990 10 0 4482600 0 -10\n    crs_wkt:                           PROJCRS[\"WGS 84 / UTM zone 10N\",BASEGE...\n    false_easting:                     500000.0\n    false_northing:                    0.0\n    geographic_crs_name:               WGS 84\n    grid_mapping_name:                 transverse_mercator\n    ...                                ...\n    projected_crs_name:                WGS 84 / UTM zone 10N\n    reference_ellipsoid_name:          WGS 84\n    scale_factor_at_central_meridian:  0.9996\n    semi_major_axis:                   6378137.0\n    semi_minor_axis:                   6356752.314245179\n    spatial_ref:                       PROJCRS[\"WGS 84 / UTM zone 10N\",BASEGE...</pre> In\u00a0[37]: Copied! <pre>str(water_bodies.data_vars[\"spatial_ref\"].values)\n</pre> str(water_bodies.data_vars[\"spatial_ref\"].values) Out[37]: <pre>'32610'</pre> <ul> <li>Inspect the Zarr coordinates</li> </ul> In\u00a0[38]: Copied! <pre>water_bodies.coords\n</pre> water_bodies.coords Out[38]: <pre>Coordinates:\n  * time     (time) datetime64[ns] 64B 2021-06-28T19:03:24.330000 ... 2021-07...\n  * x        (x) float64 44kB 6.37e+05 6.37e+05 6.37e+05 ... 6.916e+05 6.916e+05\n  * y        (y) float64 58kB 4.483e+06 4.483e+06 ... 4.411e+06 4.411e+06</pre> <ul> <li>List the values of the <code>time</code> coordinate:</li> </ul> In\u00a0[39]: Copied! <pre>water_bodies.coords[\"time\"].values\n</pre> water_bodies.coords[\"time\"].values Out[39]: <pre>array(['2021-06-28T19:03:24.330000000', '2021-07-08T19:03:25.409000000',\n       '2021-07-08T19:03:25.410000000', '2021-07-13T19:03:24.627000000',\n       '2021-07-18T19:03:25.940000000', '2021-07-23T19:03:24.661000000',\n       '2021-07-28T19:03:25.962000000', '2021-07-28T19:03:25.963000000'],\n      dtype='datetime64[ns]')</pre> <ul> <li>Plot the water bodies detected on '2021-07-13T19:03:24.000000000'</li> </ul> In\u00a0[40]: Copied! <pre>_ = (\n    water_bodies.isel(time=1)\n    .to_array(\"data\")\n    .plot.imshow(\n        col=\"data\",\n        size=4,\n        vmin=0,\n        vmax=1,\n    )\n)\n</pre> _ = (     water_bodies.isel(time=1)     .to_array(\"data\")     .plot.imshow(         col=\"data\",         size=4,         vmin=0,         vmax=1,     ) ) <p>Goal: Invoke an Application Package that consumes the detected water bodies Zarr store.</p> In\u00a0[41]: Copied! <pre>consumer_params = {}\n\nconsumer_params[\"zarr-stac-catalog\"] = {\n  \"class\": \"Directory\",\n  \"path\": producer_results[\"zarr_stac_catalog\"][\"path\"]\n}\n\nwith open(\"consumer-params.yaml\", \"w\") as file:\n    print(yaml.dump(consumer_params), file=file)\n\nprint(yaml.dump(consumer_params))\n</pre> consumer_params = {}  consumer_params[\"zarr-stac-catalog\"] = {   \"class\": \"Directory\",   \"path\": producer_results[\"zarr_stac_catalog\"][\"path\"] }  with open(\"consumer-params.yaml\", \"w\") as file:     print(yaml.dump(consumer_params), file=file)  print(yaml.dump(consumer_params)) <pre>zarr-stac-catalog:\n  class: Directory\n  path: /home/runner/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/runs/zf2jop4a\n\n</pre> <p>Now, use <code>cwltool</code> APIs to run the consumer Application Package.</p> <p>Again, any error messages such as:</p> <p><code>Error: No such object: ghcr.io/eoap/zarr-cloud-native-format/occurrence@sha256:256f8672ff74f41b97ab307162b09e07412eddd1d9658a07106379597a7c9fad</code></p> <p>is a not a real error, it's just that the container image isn't available locally and must be pulled.</p> In\u00a0[42]: Copied! <pre>version = \"0.3.0\"\n\nparsed_args = argparse.Namespace(\n    podman=podman,\n    parallel=False,\n    validate=False,\n    debug=False,\n    outdir=\"./runs\",\n    quiet=True,\n    workflow=f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies-occurrence.{version}.cwl#water-bodies-occurrence\",\n    job_order=[\"consumer-params.yaml\"],\n)\n\nstream_out = StringIO()\nstream_err = StringIO()\n\nres = main(\n    args=parsed_args,\n    stdout=stream_out,\n    stderr=stream_err,\n)\n\nassert res == 0\n</pre> version = \"0.3.0\"  parsed_args = argparse.Namespace(     podman=podman,     parallel=False,     validate=False,     debug=False,     outdir=\"./runs\",     quiet=True,     workflow=f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies-occurrence.{version}.cwl#water-bodies-occurrence\",     job_order=[\"consumer-params.yaml\"], )  stream_out = StringIO() stream_err = StringIO()  res = main(     args=parsed_args,     stdout=stream_out,     stderr=stream_err, )  assert res == 0 <pre>Error: No such object: ghcr.io/eoap/zarr-cloud-native-format/occurrence@sha256:9a2b406bd5cb3bbdbbfd0f23fda48765b3c006e18d52429c8165392e032180d9\n</pre> In\u00a0[43]: Copied! <pre>print(stream_err.getvalue())\n</pre> print(stream_err.getvalue()) <pre>WARNING [job step_occurrence] Skipping Docker software container '--memory' limit despite presence of ResourceRequirement with ramMin and/or ramMax setting. Consider running with --strict-memory-limit for increased portability assurance.\nWARNING [job step_occurrence] Skipping Docker software container '--cpus' limit despite presence of ResourceRequirement with coresMin and/or coresMax setting. Consider running with --strict-cpu-limit for increased portability assurance.\n\n</pre> <p>The execution produces a STAC Catalog:</p> In\u00a0[44]: Copied! <pre>consumer_results = json.loads(stream_out.getvalue())\n\nconsumer_results[\"stac-catalog\"][\"path\"]\n</pre> consumer_results = json.loads(stream_out.getvalue())  consumer_results[\"stac-catalog\"][\"path\"] Out[44]: <pre>'/home/runner/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/runs/5_mxfczg'</pre> In\u00a0[45]: Copied! <pre>occurence_cat = pystac.Catalog.from_file(\n    os.path.join(\n        consumer_results[\"stac-catalog\"][\"path\"], \"catalog.json\"\n    )\n)\n</pre> occurence_cat = pystac.Catalog.from_file(     os.path.join(         consumer_results[\"stac-catalog\"][\"path\"], \"catalog.json\"     ) ) <p>The STAC Catalog contains a STAC Item:</p> In\u00a0[46]: Copied! <pre>occurence_cat.describe()\n</pre> occurence_cat.describe() <pre>* &lt;Catalog id=catalog&gt;\n  * &lt;Item id=occurrence&gt;\n</pre> In\u00a0[47]: Copied! <pre>occurence_item = next(occurence_cat.get_all_items())\n\noccurence_item\n</pre> occurence_item = next(occurence_cat.get_all_items())  occurence_item Out[47]:      &lt;Item id=occurrence&gt;  <ul> <li> type \"Feature\" </li> <li> stac_version \"1.1.0\" </li> <li> stac_extensions[] 2 items <ul> <li> 0 \"https://stac-extensions.github.io/projection/v2.0.0/schema.json\" </li> </ul> <ul> <li> 1 \"https://stac-extensions.github.io/raster/v1.1.0/schema.json\" </li> </ul> </li> <li> id \"occurrence\" </li> <li> geometry <ul> <li> type \"Polygon\" </li> <li> coordinates[] 1 items <ul> <li> 0[] 5 items <ul> <li> 0[] 2 items <ul> <li> 0 -121.39905410179915 </li> </ul> <ul> <li> 1 39.833916743259095 </li> </ul> </li> </ul> <ul> <li> 1[] 2 items <ul> <li> 0 -120.76135965075635 </li> </ul> <ul> <li> 1 39.82336095080461 </li> </ul> </li> </ul> <ul> <li> 2[] 2 items <ul> <li> 0 -120.73995321724426 </li> </ul> <ul> <li> 1 40.471999341669175 </li> </ul> </li> </ul> <ul> <li> 3[] 2 items <ul> <li> 0 -121.38373773482932 </li> </ul> <ul> <li> 1 40.482798837728375 </li> </ul> </li> </ul> <ul> <li> 4[] 2 items <ul> <li> 0 -121.39905410179915 </li> </ul> <ul> <li> 1 39.833916743259095 </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> bbox[] 4 items <ul> <li> 0 -121.39905410179915 </li> </ul> <ul> <li> 1 39.82336095080461 </li> </ul> <ul> <li> 2 -120.73995321724426 </li> </ul> <ul> <li> 3 40.482798837728375 </li> </ul> </li> <li> properties <ul> <li> proj:geometry <ul> <li> type \"Polygon\" </li> <li> coordinates[] 1 items <ul> <li> 0[] 5 items <ul> <li> 0[] 2 items <ul> <li> 0 636990.0 </li> </ul> <ul> <li> 1 4410550.0 </li> </ul> </li> </ul> <ul> <li> 1[] 2 items <ul> <li> 0 691590.0 </li> </ul> <ul> <li> 1 4410550.0 </li> </ul> </li> </ul> <ul> <li> 2[] 2 items <ul> <li> 0 691590.0 </li> </ul> <ul> <li> 1 4482600.0 </li> </ul> </li> </ul> <ul> <li> 3[] 2 items <ul> <li> 0 636990.0 </li> </ul> <ul> <li> 1 4482600.0 </li> </ul> </li> </ul> <ul> <li> 4[] 2 items <ul> <li> 0 636990.0 </li> </ul> <ul> <li> 1 4410550.0 </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> proj:bbox[] 4 items <ul> <li> 0 636990.0 </li> </ul> <ul> <li> 1 4410550.0 </li> </ul> <ul> <li> 2 691590.0 </li> </ul> <ul> <li> 3 4482600.0 </li> </ul> </li> <li> proj:shape[] 2 items <ul> <li> 0 7205 </li> </ul> <ul> <li> 1 5460 </li> </ul> </li> <li> proj:transform[] 9 items <ul> <li> 0 10.0 </li> </ul> <ul> <li> 1 0.0 </li> </ul> <ul> <li> 2 636990.0 </li> </ul> <ul> <li> 3 0.0 </li> </ul> <ul> <li> 4 -10.0 </li> </ul> <ul> <li> 5 4482600.0 </li> </ul> <ul> <li> 6 0.0 </li> </ul> <ul> <li> 7 0.0 </li> </ul> <ul> <li> 8 1.0 </li> </ul> </li> <li> datetime \"2021-07-28T19:03:25.963000Z\" </li> <li> proj:code \"EPSG:32610\" </li> </ul> </li> <li> links[] 3 items <ul> <li> 0 <ul> <li> rel \"root\" </li> <li> href \"/home/runner/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/runs/5_mxfczg/catalog.json\" </li> <li> type \"application/json\" </li> </ul> </li> </ul> <ul> <li> 1 <ul> <li> rel \"self\" </li> <li> href \"/home/runner/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/runs/5_mxfczg/occurrence/occurrence.json\" </li> <li> type \"application/json\" </li> </ul> </li> </ul> <ul> <li> 2 <ul> <li> rel \"parent\" </li> <li> href \"/home/runner/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/runs/5_mxfczg/catalog.json\" </li> <li> type \"application/json\" </li> </ul> </li> </ul> </li> <li> assets <ul> <li> data <ul> <li> href \"./water_bodies_mean.tif\" </li> <li> type \"image/tiff; application=geotiff\" </li> <li> raster:bands[] 1 items <ul> <li> 0 <ul> <li> data_type \"float64\" </li> <li> scale 1.0 </li> <li> offset 0.0 </li> <li> sampling \"area\" </li> <li> statistics <ul> <li> mean 0.21473284849186533 </li> <li> minimum 0.0 </li> <li> maximum 1.0 </li> <li> stddev 0.22514651235593824 </li> <li> valid_percent 0.0001258456829896907 </li> </ul> </li> <li> histogram <ul> <li> count 11 </li> <li> min 0.0 </li> <li> max 1.0 </li> <li> buckets[] 10 items <ul> <li> 0 276001 </li> </ul> <ul> <li> 1 150587 </li> </ul> <ul> <li> 2 98456 </li> </ul> <ul> <li> 3 159801 </li> </ul> <ul> <li> 4 0 </li> </ul> <ul> <li> 5 84310 </li> </ul> <ul> <li> 6 519 </li> </ul> <ul> <li> 7 394 </li> </ul> <ul> <li> 8 494 </li> </ul> <ul> <li> 9 24062 </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> roles[] 2 items <ul> <li> 0 \"data\" </li> </ul> <ul> <li> 1 \"visual\" </li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Open the <code>data</code> STAC Asset and plot the GeoTiff:</p> In\u00a0[48]: Copied! <pre>occurence_item.get_assets()\n</pre> occurence_item.get_assets() Out[48]: <pre>{'data': &lt;Asset href=./water_bodies_mean.tif&gt;}</pre> In\u00a0[49]: Copied! <pre>import rasterio\nimport matplotlib.pyplot as plt\n\nwith rasterio.open(occurence_item.get_assets()[\"data\"].get_absolute_href()) as src:\n    img = src.read(1)\n\nplt.imshow(img, cmap=\"gray\")\nplt.colorbar()\nplt.title(\"Water bodies occurrence\")\nplt.show()\n</pre> import rasterio import matplotlib.pyplot as plt  with rasterio.open(occurence_item.get_assets()[\"data\"].get_absolute_href()) as src:     img = src.read(1)  plt.imshow(img, cmap=\"gray\") plt.colorbar() plt.title(\"Water bodies occurrence\") plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"exploitation/#tldr","title":"TL;DR\u00b6","text":"<p>Zarr Cloud native format in Earth Observation Application Packages.</p>"},{"location":"exploitation/#application-package-overview","title":"Application Package Overview\u00b6","text":"<p>See https://github.com/eoap/zarr-cloud-native-format/releases for the latest Application Packages</p>"},{"location":"exploitation/#producer-application-package","title":"Producer Application Package\u00b6","text":"<p>The workflow is based on one of the workflows of the https://github.com/eoap#mastering-earth-observation-application-packaging-with-cwl module extended to provide the temporal element.</p> <p>The steps are:</p> <ol> <li>STAC API Discovery: defines a STAC API search request and queries a STAC API endpoint returning a FeatureCollection</li> <li>SearchResults: extracts the discovered STAC Items <code>self</code> href.</li> <li>Water bodies detection: a sub-workflow that runs:</li> </ol> <ul> <li>Cropping: Crops Sentinel-2 imagery to the Area of Interest (AOI).</li> <li>Normalized Difference Water Index (NDWI): Computes NDWI to identify water bodies.</li> <li>Otsu Thresholding: Applies Otsu's thresholding method to binarize NDWI values.</li> </ul> <ol> <li>Zarr dataset creation and STAC Metadata: Converts the results into a Zarr dataset and generates the STAC Collection including STAC Datacube Extension.</li> </ol>"},{"location":"exploitation/#inputs","title":"Inputs\u00b6","text":""},{"location":"exploitation/#steps","title":"Steps\u00b6","text":""},{"location":"exploitation/#outputs","title":"Outputs\u00b6","text":""},{"location":"exploitation/#component-diagram","title":"Component diagram\u00b6","text":""},{"location":"exploitation/#class-diagram","title":"Class diagram\u00b6","text":""},{"location":"exploitation/#consumer-application-package","title":"Consumer Application Package\u00b6","text":"<p>The workflow reads the produced STAC Catalog describing the detected water bodies Zarr store and produces the mean over the time dimension.</p> <p>There's a single step that:</p> <ol> <li>Read STAC Catalog: read the STAC Catalog and inspect the STAC Collection</li> <li>Read the Zarr store: read the Zarr store STAC Asset</li> <li>mean calculation: use <code>xarray</code> to calculate the mean over the time dimension</li> <li>export to GeoTIFF: user <code>rioxarray</code> to write a GeoTIFF</li> <li>Generate STAC Catalog: create a STAC Catalog describing the result</li> </ol>"},{"location":"exploitation/#inputs","title":"Inputs\u00b6","text":""},{"location":"exploitation/#steps","title":"Steps\u00b6","text":""},{"location":"exploitation/#outputs","title":"Outputs\u00b6","text":""},{"location":"exploitation/#component-diagram","title":"Component diagram\u00b6","text":""},{"location":"exploitation/#class-diagram","title":"Class diagram\u00b6","text":""},{"location":"exploitation/#pre-requisites","title":"Pre-requisites\u00b6","text":"<p>To run this notebook, the pre-requisites are:</p> <ul> <li>A container runtime like <code>docker</code> or <code>podman</code></li> <li>The <code>cwltool</code> CWL runner</li> <li>The Python libraries <code>shutil</code>, <code>pystac</code>, <code>xarray</code>, <code>rasterio</code> and <code>matplotlib</code></li> </ul>"},{"location":"exploitation/#part-1-zarr-store-producer-application-package-execution","title":"Part 1 - Zarr store producer: Application Package execution\u00b6","text":"<p>Use <code>cwltool</code> to run the producer Application Package.</p>"},{"location":"exploitation/#modules-used","title":"Modules used\u00b6","text":""},{"location":"exploitation/#container-runtime","title":"Container runtime\u00b6","text":"<p>Check if <code>podman</code> or <code>docker</code> are available:</p>"},{"location":"exploitation/#prepare-the-producer-application-package-execution","title":"Prepare the producer Application Package execution\u00b6","text":"<p>Use <code>cwltool</code> and Python to execute the Application Package.</p> <p>First create a YAML file with the parameters:</p>"},{"location":"exploitation/#producer-application-package-execution","title":"Producer Application Package execution\u00b6","text":"<p>We use the released application package available here https://github.com/eoap/zarr-cloud-native-format/releases and cwltool APIs to run the Application Package.</p> <p>Any error messages such as:</p> <p><code>Error: No such object: ghcr.io/eoap/zarr-cloud-native-format/stac-zarr@sha256:72fdc2757ace393b3d94995bd3e300e0f32c6a3906fe5e659f8a9efb95de76ea</code></p> <p>is a not a real error, it's just that the container image isn't available locally and must be pulled.</p>"},{"location":"exploitation/#part-2-inspect-application-package-results","title":"Part 2 - Inspect Application Package results\u00b6","text":"<p>Read the STAC Catalog containing the Zarr store</p>"},{"location":"exploitation/#modules","title":"Modules\u00b6","text":""},{"location":"exploitation/#inspect-the-stac-collection-metadata","title":"Inspect the STAC Collection metadata\u00b6","text":"<p>Open the STAC Catalog generated as an output of the producer Application Package execution:</p>"},{"location":"exploitation/#part-3-inspect-the-zarr-store","title":"Part 3 - Inspect the zarr store\u00b6","text":"<p>Open the Zarr store with <code>xarray</code> to access its metadata and data.</p>"},{"location":"exploitation/#modules","title":"Modules\u00b6","text":""},{"location":"exploitation/#open-the-zarr-result-with-xarray","title":"Open the Zarr result with xarray\u00b6","text":""},{"location":"exploitation/#part-4-consume-the-zarr-store-using-the-consumer-application-package","title":"Part 4 - Consume the Zarr store using the consumer Application Package\u00b6","text":""},{"location":"exploitation/#run-the-consumer-application-package","title":"Run the consumer Application Package\u00b6","text":"<p>First, create a YAML file with the parameters: the path to the STAC Catalog describing the detected water bodies Zarr store.</p>"},{"location":"exploitation/#inspect-the-generate-stac-catalog","title":"Inspect the generate STAC Catalog\u00b6","text":""},{"location":"exploitation/#plot-the-mean-geotiff","title":"Plot the mean GeoTiff\u00b6","text":""},{"location":"helpers/","title":"Helpers","text":"In\u00a0[1]: Copied! <pre>import graphviz\nfrom cwl2puml import to_puml, DiagramType\nfrom cwltool.main import main as cwlmain\nfrom cwltool.context import LoadingContext, RuntimeContext\nfrom cwltool.executors import NoopJobExecutor\nfrom io import StringIO, BytesIO\nfrom IPython.display import Markdown, display\nfrom eoap_cwlwrap import _search_workflow\nfrom eoap_cwlwrap.types import type_to_string\nfrom cwl_loader import load_cwl_from_location\nfrom PIL import Image\nfrom plantuml import deflate_and_encode\nfrom urllib.request import urlopen\n</pre> import graphviz from cwl2puml import to_puml, DiagramType from cwltool.main import main as cwlmain from cwltool.context import LoadingContext, RuntimeContext from cwltool.executors import NoopJobExecutor from io import StringIO, BytesIO from IPython.display import Markdown, display from eoap_cwlwrap import _search_workflow from eoap_cwlwrap.types import type_to_string from cwl_loader import load_cwl_from_location from PIL import Image from plantuml import deflate_and_encode from urllib.request import urlopen In\u00a0[2]: Copied! <pre>class WorkflowViewer:\n    def __init__(self, cwl_file, workflow, entrypoint):\n        self.cwl_file = cwl_file\n        self.workflow = workflow\n        self.entrypoint = entrypoint\n        self.output = \".wrapped.cwl\"\n        self.base_url = \"https://raw.githubusercontent.com/eoap/application-package-patterns/refs/heads/main\"\n\n    @staticmethod\n    def from_file(cwl_file, entrypoint):\n        workflow = load_cwl_from_location(path=cwl_file)\n        return WorkflowViewer(cwl_file, workflow, entrypoint)\n\n    @staticmethod\n    def from_reference(cwl_file, workflow, entrypoint):\n        return WorkflowViewer(cwl_file, workflow, entrypoint)\n\n    def _prepare_headers(self, headers: list[str]):\n        return f\"| {' | '.join(headers)} |\\n| {' | '.join([\"---\"] * len(headers))} |\\n\"\n\n    def _display_parameters(self, parameters_name, entrypoint=None):\n        md = self._prepare_headers([\"Id\", \"Type\", \"Label\", \"Doc\"])\n\n        if entrypoint is None:\n            entrypoint = self.entrypoint\n\n        wf = _search_workflow(workflow_id=entrypoint, workflow=self.workflow)\n\n        for p in getattr(wf, parameters_name, []):\n            md += f\"| `{p.id}` | `{type_to_string(p.type_)}` | {p.label} | {p.doc} |\\n\"\n\n        display(Markdown(md))\n\n    def display_inputs(self, entrypoint=None):\n        self._display_parameters(\"inputs\", entrypoint=entrypoint)\n\n    def display_outputs(self, entrypoint=None):\n        self._display_parameters(\"outputs\", entrypoint=entrypoint)\n\n    def display_steps(self):\n        md = self._prepare_headers([\"Id\", \"Runs\", \"Label\", \"Doc\"])\n\n        for step in _search_workflow(\n            workflow_id=self.entrypoint, workflow=self.workflow\n        ).steps:\n            md += f\"| `{step.id.replace(f'file:///#{self.entrypoint}/', '')}` | `{step.run}` | {step.label} | {step.doc} |\\n\"\n\n        display(Markdown(md))\n\n    def _display_puml(self, diagram_type: DiagramType, wf):\n\n        out = StringIO()\n        to_puml(\n            cwl_document=wf,\n            diagram_type=diagram_type,\n            output_stream=out,\n        )\n\n        clear_output = out.getvalue()\n        encoded = deflate_and_encode(clear_output)\n\n        diagram_url = f\"https://img.plantuml.biz/plantuml/png/{encoded}\"\n\n        with urlopen(diagram_url) as url:\n            img = Image.open(BytesIO(url.read()))\n        display(img)\n\n    def display_components_diagram(self, entrypoint=None):\n        \n        if entrypoint is not None: \n            wf = _search_workflow(workflow_id=entrypoint, workflow=self.workflow)\n        else:\n            wf = self.workflow\n\n        self._display_puml(DiagramType.COMPONENTS, wf=wf)\n\n    def display_class_diagram(self, entrypoint=None):\n        if entrypoint is None:\n            entrypoint = self.entrypoint\n\n        wf = _search_workflow(workflow_id=entrypoint, workflow=self.workflow)\n        self._display_puml(DiagramType.CLASS, wf=wf)\n\n    def plot(self):\n        args = [\"--print-dot\", f\"{self.cwl_file}#{self.entrypoint}\"]\n\n        stream_err = StringIO()\n        stream_out = StringIO()\n\n        _ = cwlmain(\n            args,\n            stdout=stream_out,\n            stderr=stream_err,\n            executor=NoopJobExecutor(),\n            loadingContext=LoadingContext(),\n            runtimeContext=RuntimeContext(),\n        )\n\n        return graphviz.Source(stream_out.getvalue())\n</pre> class WorkflowViewer:     def __init__(self, cwl_file, workflow, entrypoint):         self.cwl_file = cwl_file         self.workflow = workflow         self.entrypoint = entrypoint         self.output = \".wrapped.cwl\"         self.base_url = \"https://raw.githubusercontent.com/eoap/application-package-patterns/refs/heads/main\"      @staticmethod     def from_file(cwl_file, entrypoint):         workflow = load_cwl_from_location(path=cwl_file)         return WorkflowViewer(cwl_file, workflow, entrypoint)      @staticmethod     def from_reference(cwl_file, workflow, entrypoint):         return WorkflowViewer(cwl_file, workflow, entrypoint)      def _prepare_headers(self, headers: list[str]):         return f\"| {' | '.join(headers)} |\\n| {' | '.join([\"---\"] * len(headers))} |\\n\"      def _display_parameters(self, parameters_name, entrypoint=None):         md = self._prepare_headers([\"Id\", \"Type\", \"Label\", \"Doc\"])          if entrypoint is None:             entrypoint = self.entrypoint          wf = _search_workflow(workflow_id=entrypoint, workflow=self.workflow)          for p in getattr(wf, parameters_name, []):             md += f\"| `{p.id}` | `{type_to_string(p.type_)}` | {p.label} | {p.doc} |\\n\"          display(Markdown(md))      def display_inputs(self, entrypoint=None):         self._display_parameters(\"inputs\", entrypoint=entrypoint)      def display_outputs(self, entrypoint=None):         self._display_parameters(\"outputs\", entrypoint=entrypoint)      def display_steps(self):         md = self._prepare_headers([\"Id\", \"Runs\", \"Label\", \"Doc\"])          for step in _search_workflow(             workflow_id=self.entrypoint, workflow=self.workflow         ).steps:             md += f\"| `{step.id.replace(f'file:///#{self.entrypoint}/', '')}` | `{step.run}` | {step.label} | {step.doc} |\\n\"          display(Markdown(md))      def _display_puml(self, diagram_type: DiagramType, wf):          out = StringIO()         to_puml(             cwl_document=wf,             diagram_type=diagram_type,             output_stream=out,         )          clear_output = out.getvalue()         encoded = deflate_and_encode(clear_output)          diagram_url = f\"https://img.plantuml.biz/plantuml/png/{encoded}\"          with urlopen(diagram_url) as url:             img = Image.open(BytesIO(url.read()))         display(img)      def display_components_diagram(self, entrypoint=None):                  if entrypoint is not None:              wf = _search_workflow(workflow_id=entrypoint, workflow=self.workflow)         else:             wf = self.workflow          self._display_puml(DiagramType.COMPONENTS, wf=wf)      def display_class_diagram(self, entrypoint=None):         if entrypoint is None:             entrypoint = self.entrypoint          wf = _search_workflow(workflow_id=entrypoint, workflow=self.workflow)         self._display_puml(DiagramType.CLASS, wf=wf)      def plot(self):         args = [\"--print-dot\", f\"{self.cwl_file}#{self.entrypoint}\"]          stream_err = StringIO()         stream_out = StringIO()          _ = cwlmain(             args,             stdout=stream_out,             stderr=stream_err,             executor=NoopJobExecutor(),             loadingContext=LoadingContext(),             runtimeContext=RuntimeContext(),         )          return graphviz.Source(stream_out.getvalue())"},{"location":"pratice-labs/","title":"Pratice labs","text":""},{"location":"cwl-cli/convert-search/","title":"Convert search","text":"In\u00a0[1]: Copied! <pre>import os\nimport sys\n\nmodule_path = os.path.abspath(os.path.join(\"..\"))\nsys.path.insert(0, module_path)\n\nfrom helpers import WorkflowViewer\nimport cwl_loader\ncwl_loader.logger.remove()\ncwl_loader.logger.add(sys.stderr, level=\"INFO\")\n</pre> import os import sys  module_path = os.path.abspath(os.path.join(\"..\")) sys.path.insert(0, module_path)  from helpers import WorkflowViewer import cwl_loader cwl_loader.logger.remove() cwl_loader.logger.add(sys.stderr, level=\"INFO\") Out[1]: <pre>1</pre> In\u00a0[2]: Copied! <pre>version = \"0.3.0\"\nwf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", entrypoint=\"water-bodies\")\n</pre> version = \"0.3.0\" wf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", entrypoint=\"water-bodies\") In\u00a0[3]: Copied! <pre>wf.display_inputs(entrypoint=\"convert-search\")\n</pre> wf.display_inputs(entrypoint=\"convert-search\") Id Type Label Doc <code>search_request</code> <code>https://raw.githubusercontent.com/eoap/schemas/main/experimental/discovery.yaml#STACSearchSettings</code> Search Request Search request from the discovery step <code>search_results</code> <code>File</code> Search Results Search results from the discovery step In\u00a0[4]: Copied! <pre>wf.display_outputs(entrypoint=\"convert-search\")\n</pre> wf.display_outputs(entrypoint=\"convert-search\")  Id Type Label Doc <code>items</code> <code>Any</code> None None <code>aoi</code> <code>string</code> None None In\u00a0[5]: Copied! <pre>wf.display_class_diagram(entrypoint=\"convert-search\")\n</pre> wf.display_class_diagram(entrypoint=\"convert-search\") In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"cwl-cli/convert-search/#convert-search","title":"Convert search\u00b6","text":"<p>Invoke a Common Workflow Language CommandLineTool bash script to invoke <code>yq</code> to:</p> <ul> <li>extract the discovered STAC Items <code>self</code> link <code>href</code> that is used as an input in the water bodies detection sub-workflow</li> <li>extract the aoi bounding box from the <code>search_request</code> input parameter</li> </ul>"},{"location":"cwl-cli/convert-search/#inputs","title":"Inputs\u00b6","text":""},{"location":"cwl-cli/convert-search/#outputs","title":"Outputs\u00b6","text":""},{"location":"cwl-cli/convert-search/#class-diagram","title":"Class diagram\u00b6","text":""},{"location":"cwl-cli/discovery/","title":"Discovery","text":"In\u00a0[1]: Copied! <pre>import os\nimport sys\n\nmodule_path = os.path.abspath(os.path.join(\"..\"))\nsys.path.insert(0, module_path)\n\nfrom helpers import WorkflowViewer\nimport cwl_loader\ncwl_loader.logger.remove()\ncwl_loader.logger.add(sys.stderr, level=\"INFO\")\n</pre> import os import sys  module_path = os.path.abspath(os.path.join(\"..\")) sys.path.insert(0, module_path)  from helpers import WorkflowViewer import cwl_loader cwl_loader.logger.remove() cwl_loader.logger.add(sys.stderr, level=\"INFO\") Out[1]: <pre>1</pre> In\u00a0[2]: Copied! <pre>version = \"0.3.0\"\nwf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", entrypoint=\"water-bodies\")\n</pre> version = \"0.3.0\" wf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", entrypoint=\"water-bodies\") In\u00a0[3]: Copied! <pre>wf.display_inputs(entrypoint=\"stac-client\")\n</pre> wf.display_inputs(entrypoint=\"stac-client\") Id Type Label Doc <code>api_endpoint</code> <code>https://raw.githubusercontent.com/eoap/schemas/main/experimental/api-endpoint.yaml#APIEndpoint</code> STAC API endpoint STAC API endpoint for Landsat-9 data <code>search_request</code> <code>https://raw.githubusercontent.com/eoap/schemas/main/experimental/discovery.yaml#STACSearchSettings</code> STAC API settings STAC API settings for Landsat-9 data In\u00a0[4]: Copied! <pre>wf.display_outputs(entrypoint=\"stac-client\")\n</pre> wf.display_outputs(entrypoint=\"stac-client\")  Id Type Label Doc <code>search_output</code> <code>File</code> None None In\u00a0[5]: Copied! <pre>wf.display_class_diagram(entrypoint=\"stac-client\")\n</pre> wf.display_class_diagram(entrypoint=\"stac-client\") In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"cwl-cli/discovery/#discovery","title":"Discovery\u00b6","text":"<p>This section describes the <code>stac-client search</code> tool as a Common Workflow Language CommandLineTool that discovers the Sentinel-2 acquisitions to process</p>"},{"location":"cwl-cli/discovery/#inputs","title":"Inputs\u00b6","text":""},{"location":"cwl-cli/discovery/#outputs","title":"Outputs\u00b6","text":""},{"location":"cwl-cli/discovery/#class-diagram","title":"Class diagram\u00b6","text":""},{"location":"cwl-cli/stac-zarr/","title":"STAC Zarr","text":"In\u00a0[1]: Copied! <pre>import os\nimport sys\n\nmodule_path = os.path.abspath(os.path.join(\"..\"))\nsys.path.insert(0, module_path)\n\nfrom helpers import WorkflowViewer\nimport cwl_loader\ncwl_loader.logger.remove()\ncwl_loader.logger.add(sys.stderr, level=\"INFO\")\n</pre> import os import sys  module_path = os.path.abspath(os.path.join(\"..\")) sys.path.insert(0, module_path)  from helpers import WorkflowViewer import cwl_loader cwl_loader.logger.remove() cwl_loader.logger.add(sys.stderr, level=\"INFO\") Out[1]: <pre>1</pre> In\u00a0[2]: Copied! <pre>version = \"0.3.0\"\nwf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", entrypoint=\"water-bodies\")\n</pre> version = \"0.3.0\" wf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", entrypoint=\"water-bodies\") In\u00a0[3]: Copied! <pre>wf.display_inputs(entrypoint=\"stac-zarr\")\n</pre> wf.display_inputs(entrypoint=\"stac-zarr\") Id Type Label Doc <code>stac_catalog</code> <code>Directory</code> None None In\u00a0[4]: Copied! <pre>wf.display_outputs(entrypoint=\"stac-zarr\")\n</pre> wf.display_outputs(entrypoint=\"stac-zarr\")  Id Type Label Doc <code>zarr_stac_catalog</code> <code>Directory</code> None None In\u00a0[5]: Copied! <pre>wf.display_class_diagram(entrypoint=\"stac-zarr\")\n</pre> wf.display_class_diagram(entrypoint=\"stac-zarr\")"},{"location":"cwl-cli/stac-zarr/#stac-zarr","title":"STAC Zarr\u00b6","text":""},{"location":"cwl-cli/stac-zarr/#inputs","title":"Inputs\u00b6","text":""},{"location":"cwl-cli/stac-zarr/#outputs","title":"Outputs\u00b6","text":""},{"location":"cwl-cli/stac-zarr/#class-diagram","title":"Class diagram\u00b6","text":""},{"location":"cwl-cli/stac/","title":"STAC","text":"In\u00a0[1]: Copied! <pre>import os\nimport sys\n\nmodule_path = os.path.abspath(os.path.join(\"..\"))\nsys.path.insert(0, module_path)\n\nfrom helpers import WorkflowViewer\nimport cwl_loader\ncwl_loader.logger.remove()\ncwl_loader.logger.add(sys.stderr, level=\"INFO\")\n</pre> import os import sys  module_path = os.path.abspath(os.path.join(\"..\")) sys.path.insert(0, module_path)  from helpers import WorkflowViewer import cwl_loader cwl_loader.logger.remove() cwl_loader.logger.add(sys.stderr, level=\"INFO\") Out[1]: <pre>1</pre> In\u00a0[2]: Copied! <pre>version = \"0.3.0\"\nwf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", entrypoint=\"water-bodies\")\n</pre> version = \"0.3.0\" wf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", entrypoint=\"water-bodies\") In\u00a0[3]: Copied! <pre>wf.display_inputs(entrypoint=\"stac\")\n</pre> wf.display_inputs(entrypoint=\"stac\") Id Type Label Doc <code>api_endpoint</code> <code>https://raw.githubusercontent.com/eoap/schemas/main/experimental/api-endpoint.yaml#APIEndpoint</code> STAC API endpoint STAC API endpoint for Landsat-9 data <code>search_request</code> <code>https://raw.githubusercontent.com/eoap/schemas/main/experimental/discovery.yaml#STACSearchSettings</code> STAC API settings STAC API settings for Landsat-9 data In\u00a0[4]: Copied! <pre>wf.display_outputs(entrypoint=\"stac\")\n</pre> wf.display_outputs(entrypoint=\"stac\")  Id Type Label Doc <code>search_output</code> <code>File</code> None None In\u00a0[5]: Copied! <pre>wf.display_class_diagram(entrypoint=\"stac\")\n</pre> wf.display_class_diagram(entrypoint=\"stac\")"},{"location":"cwl-cli/stac/#stac","title":"STAC\u00b6","text":"<p>STAC Catalog generation</p>"},{"location":"cwl-cli/stac/#inputs","title":"Inputs\u00b6","text":""},{"location":"cwl-cli/stac/#outputs","title":"Outputs\u00b6","text":""},{"location":"cwl-cli/stac/#class-diagram","title":"Class diagram\u00b6","text":""},{"location":"cwl-workflows/consumer/","title":"Consumer","text":"In\u00a0[1]: Copied! <pre>import os\nimport sys\n\nmodule_path = os.path.abspath(os.path.join(\"..\"))\nsys.path.insert(0, module_path)\n\nfrom helpers import WorkflowViewer\nimport cwl_loader\ncwl_loader.logger.remove()\ncwl_loader.logger.add(sys.stderr, level=\"INFO\")\n</pre> import os import sys  module_path = os.path.abspath(os.path.join(\"..\")) sys.path.insert(0, module_path)  from helpers import WorkflowViewer import cwl_loader cwl_loader.logger.remove() cwl_loader.logger.add(sys.stderr, level=\"INFO\") Out[1]: <pre>1</pre> <p>Plot the Application Paca</p> In\u00a0[2]: Copied! <pre>version = \"0.3.0\"\nwf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies-occurrence.{version}.cwl\", \"water-bodies-occurrence\")\n</pre> version = \"0.3.0\" wf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies-occurrence.{version}.cwl\", \"water-bodies-occurrence\") In\u00a0[3]: Copied! <pre>wf.plot()\n</pre> wf.plot() Out[3]: In\u00a0[4]: Copied! <pre>wf.display_inputs()\n</pre> wf.display_inputs() Id Type Label Doc <code>zarr-stac-catalog</code> <code>Directory</code> Zarr store STAC Catalog Input STAC catalog with datacube In\u00a0[5]: Copied! <pre>wf.display_steps()\n</pre> wf.display_steps() Id Runs Label Doc <code>step_occurrence</code> <code>#occurrence</code> Water bodies occurrence Water bodies occurrence based on NDWI and otsu threshold In\u00a0[6]: Copied! <pre>wf.display_outputs()\n</pre> wf.display_outputs()  Id Type Label Doc <code>stac-catalog</code> <code>Directory</code> STAC catalog Output STAC catalog with water bodies occurrence In\u00a0[7]: Copied! <pre>wf.display_components_diagram()\n</pre> wf.display_components_diagram() In\u00a0[8]: Copied! <pre>wf.display_class_diagram()\n</pre> wf.display_class_diagram() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"cwl-workflows/consumer/#consumer","title":"Consumer\u00b6","text":"<p>This is a downstream Application Package that produces the mean value using as input the Zarr store of the detected water bodies described as a STAC Collection including the STAC Datacube extension</p>"},{"location":"cwl-workflows/consumer/#inputs","title":"Inputs\u00b6","text":""},{"location":"cwl-workflows/consumer/#steps","title":"Steps\u00b6","text":""},{"location":"cwl-workflows/consumer/#outputs","title":"Outputs\u00b6","text":""},{"location":"cwl-workflows/consumer/#component-diagram","title":"Component diagram\u00b6","text":""},{"location":"cwl-workflows/consumer/#class-diagram","title":"Class diagram\u00b6","text":""},{"location":"cwl-workflows/producer/","title":"Producer","text":"In\u00a0[1]: Copied! <pre>import os\nimport sys\n\nmodule_path = os.path.abspath(os.path.join(\"..\"))\nsys.path.insert(0, module_path)\n\nfrom helpers import WorkflowViewer\nimport cwl_loader\ncwl_loader.logger.remove()\ncwl_loader.logger.add(sys.stderr, level=\"INFO\")\n</pre> import os import sys  module_path = os.path.abspath(os.path.join(\"..\")) sys.path.insert(0, module_path)  from helpers import WorkflowViewer import cwl_loader cwl_loader.logger.remove() cwl_loader.logger.add(sys.stderr, level=\"INFO\") Out[1]: <pre>1</pre> In\u00a0[2]: Copied! <pre>version = \"0.3.0\"\nwf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", \"water-bodies\")\n</pre> version = \"0.3.0\" wf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", \"water-bodies\") In\u00a0[3]: Copied! <pre>wf.display_inputs()\n</pre> wf.display_inputs() Id Type Label Doc <code>stac_api_endpoint</code> <code>https://raw.githubusercontent.com/eoap/schemas/main/experimental/api-endpoint.yaml#APIEndpoint</code> STAC API endpoint STAC API endpoint <code>search_request</code> <code>https://raw.githubusercontent.com/eoap/schemas/main/experimental/discovery.yaml#STACSearchSettings</code> STAC search request STAC search request <code>bands</code> <code>string[]</code> bands used for the NDWI bands used for the NDWI In\u00a0[4]: Copied! <pre>wf.display_steps()\n</pre> wf.display_steps() Id Runs Label Doc <code>discovery</code> <code>#stac-client</code> STAC API discovery Discover STAC items from a STAC API endpoint based on a search request <code>convert_search</code> <code>#convert-search</code> Convert Search Convert Search results to get the item self hrefs and the area of interest <code>water_bodies</code> <code>#detect_water_body</code> Water bodies detection Water bodies detection based on NDWI and otsu threshold applied to each STAC item (sub-workflow) <code>stac</code> <code>#stac</code> Create a STAC catalog with COG outputs Create a STAC catalog with the detected water bodies COG outputs <code>stac_zarr</code> <code>#stac-zarr</code> Create a STAC Catalog for the Zarr store Create a STAC Catalog for the Zarr store from the STAC catalog with COG outputs In\u00a0[5]: Copied! <pre>wf.display_outputs()\n</pre> wf.display_outputs()  Id Type Label Doc <code>zarr_stac_catalog</code> <code>Directory</code> None None <code>stac_catalog</code> <code>Directory</code> None None In\u00a0[6]: Copied! <pre>wf.display_components_diagram()\n</pre> wf.display_components_diagram() In\u00a0[7]: Copied! <pre>wf.display_class_diagram()\n</pre> wf.display_class_diagram() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"cwl-workflows/producer/#producer","title":"Producer\u00b6","text":"<p>Application Package to produce a Zarr store with detected water bodies described as a STAC Collection including the STAC Datacube extension.</p>"},{"location":"cwl-workflows/producer/#inputs","title":"Inputs\u00b6","text":""},{"location":"cwl-workflows/producer/#steps","title":"Steps\u00b6","text":""},{"location":"cwl-workflows/producer/#outputs","title":"Outputs\u00b6","text":""},{"location":"cwl-workflows/producer/#component-diagram","title":"Component diagram\u00b6","text":""},{"location":"cwl-workflows/producer/#class-diagram","title":"Class diagram\u00b6","text":""},{"location":"sub-workflow/water-bodies-detection/","title":"Water bodies detection","text":"In\u00a0[1]: Copied! <pre>import os\nimport sys\n\nmodule_path = os.path.abspath(os.path.join(\"..\"))\nsys.path.insert(0, module_path)\n\nfrom helpers import WorkflowViewer\nimport cwl_loader\ncwl_loader.logger.remove()\ncwl_loader.logger.add(sys.stderr, level=\"INFO\")\n</pre> import os import sys  module_path = os.path.abspath(os.path.join(\"..\")) sys.path.insert(0, module_path)  from helpers import WorkflowViewer import cwl_loader cwl_loader.logger.remove() cwl_loader.logger.add(sys.stderr, level=\"INFO\") Out[1]: <pre>1</pre> <p>Plot the Application Paca</p> In\u00a0[2]: Copied! <pre>version = \"0.3.0\"\nwf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", \"detect_water_body\")\n</pre> version = \"0.3.0\" wf = WorkflowViewer.from_file(f\"https://github.com/eoap/zarr-cloud-native-format/releases/download/{version}/app-water-bodies.{version}.cwl\", \"detect_water_body\") In\u00a0[3]: Copied! <pre>wf.plot()\n</pre> wf.plot() Out[3]: In\u00a0[4]: Copied! <pre>wf.display_inputs()\n</pre> wf.display_inputs() Id Type Label Doc <code>aoi</code> <code>string</code> None area of interest as a bounding box <code>epsg</code> <code>string</code> None EPSG code <code>bands</code> <code>string[]</code> None bands used for the NDWI <code>item</code> <code>string</code> None STAC item In\u00a0[5]: Copied! <pre>wf.display_steps()\n</pre> wf.display_steps() Id Runs Label Doc <code>crop</code> <code>#crop</code> None None <code>normalized_difference</code> <code>#norm_diff</code> None None <code>otsu</code> <code>#otsu</code> None None In\u00a0[6]: Copied! <pre>wf.display_outputs()\n</pre> wf.display_outputs()  Id Type Label Doc <code>detected_water_body</code> <code>File</code> None None In\u00a0[7]: Copied! <pre>wf.display_components_diagram(entrypoint=\"detect_water_body\")\n</pre> wf.display_components_diagram(entrypoint=\"detect_water_body\") In\u00a0[8]: Copied! <pre>wf.display_class_diagram(entrypoint=\"detect_water_body\")\n</pre> wf.display_class_diagram(entrypoint=\"detect_water_body\") <pre>\n---------------------------------------------------------------------------\nRemoteDisconnected                        Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 wf.display_class_diagram(entrypoint=\"detect_water_body\")\n\nFile ~/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/helpers.py:97, in WorkflowViewer.display_class_diagram(self, entrypoint)\n     94     entrypoint = self.entrypoint\n     96 wf = _search_workflow(workflow_id=entrypoint, workflow=self.workflow)\n---&gt; 97 self._display_puml(DiagramType.CLASS, wf=wf)\n\nFile ~/work/zarr-cloud-native-format/zarr-cloud-native-format/docs/helpers.py:79, in WorkflowViewer._display_puml(self, diagram_type, wf)\n     75 encoded = deflate_and_encode(clear_output)\n     77 diagram_url = f\"https://img.plantuml.biz/plantuml/png/{encoded}\"\n---&gt; 79 with urlopen(diagram_url) as url:\n     80     img = Image.open(BytesIO(url.read()))\n     81 display(img)\n\nFile /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/urllib/request.py:189, in urlopen(url, data, timeout, context)\n    187 else:\n    188     opener = _opener\n--&gt; 189 return opener.open(url, data, timeout)\n\nFile /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/urllib/request.py:489, in OpenerDirector.open(self, fullurl, data, timeout)\n    486     req = meth(req)\n    488 sys.audit('urllib.Request', req.full_url, req.data, req.headers, req.get_method())\n--&gt; 489 response = self._open(req, data)\n    491 # post-process response\n    492 meth_name = protocol+\"_response\"\n\nFile /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/urllib/request.py:506, in OpenerDirector._open(self, req, data)\n    503     return result\n    505 protocol = req.type\n--&gt; 506 result = self._call_chain(self.handle_open, protocol, protocol +\n    507                           '_open', req)\n    508 if result:\n    509     return result\n\nFile /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/urllib/request.py:466, in OpenerDirector._call_chain(self, chain, kind, meth_name, *args)\n    464 for handler in handlers:\n    465     func = getattr(handler, meth_name)\n--&gt; 466     result = func(*args)\n    467     if result is not None:\n    468         return result\n\nFile /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/urllib/request.py:1367, in HTTPSHandler.https_open(self, req)\n   1366 def https_open(self, req):\n-&gt; 1367     return self.do_open(http.client.HTTPSConnection, req,\n   1368                         context=self._context)\n\nFile /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/urllib/request.py:1323, in AbstractHTTPHandler.do_open(self, http_class, req, **http_conn_args)\n   1321     except OSError as err: # timeout error\n   1322         raise URLError(err)\n-&gt; 1323     r = h.getresponse()\n   1324 except:\n   1325     h.close()\n\nFile /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/http/client.py:1430, in HTTPConnection.getresponse(self)\n   1428 try:\n   1429     try:\n-&gt; 1430         response.begin()\n   1431     except ConnectionError:\n   1432         self.close()\n\nFile /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/http/client.py:331, in HTTPResponse.begin(self)\n    329 # read until we get a non-100 response\n    330 while True:\n--&gt; 331     version, status, reason = self._read_status()\n    332     if status != CONTINUE:\n    333         break\n\nFile /opt/hostedtoolcache/Python/3.13.7/x64/lib/python3.13/http/client.py:300, in HTTPResponse._read_status(self)\n    296     print(\"reply:\", repr(line))\n    297 if not line:\n    298     # Presumably, the server closed the connection before\n    299     # sending a valid response.\n--&gt; 300     raise RemoteDisconnected(\"Remote end closed connection without\"\n    301                              \" response\")\n    302 try:\n    303     version, status, reason = line.split(None, 2)\n\nRemoteDisconnected: Remote end closed connection without response</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"sub-workflow/water-bodies-detection/#water-bodies-detection","title":"Water bodies detection\u00b6","text":""},{"location":"sub-workflow/water-bodies-detection/#inputs","title":"Inputs\u00b6","text":""},{"location":"sub-workflow/water-bodies-detection/#steps","title":"Steps\u00b6","text":""},{"location":"sub-workflow/water-bodies-detection/#outputs","title":"Outputs\u00b6","text":""},{"location":"sub-workflow/water-bodies-detection/#component-diagram","title":"Component diagram\u00b6","text":""},{"location":"sub-workflow/water-bodies-detection/#class-diagram","title":"Class diagram\u00b6","text":""}]}